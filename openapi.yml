openapi: 3.0.3
info:
  title: 스티비 API
  description: |-
    ### 개요
    이 문서는 스티비에서 제공하는 API의 요청 및 응답 방식에 대한 내용을 설명합니다.<br/>
    (기존 API 문서: https://api.stibee.com/docs/)

    ### 권한
    | 요금제          | 구독자 | 이메일, 그룹 | 주소록, 발신자 주소 |
    |------------------|--------|----------------|------------------------------|
    | 스탠다드 요금제 | ✅      | -              | -                            |
    | 프로 요금제     | ✅      | ✅             | -                            |
    | 엔터프라이즈 요금제 | ✅      | ✅             | ✅                           |

    - <a href="#tag/주소록---구독자">구독자</a>: 구독자 추가, 수정 등 구독자 관리를 자동화하여 고객 DB와 연동할 수 있습니다.<br/>
    - <a href="#tag/이메일">이메일</a>, <a href="#tag/주소록---그룹">그룹</a>: 이메일 발송과 관리를 자동화하여 스티비에 로그인하지 않고도 이메일을 만들고 발송할 수 있습니다.
    - <a href="#tag/주소록">주소록</a>, <a href="#tag/주소록---발신자-이메일-주소">발신자 주소</a>: 주소록 관리와 발신자 이메일 주소 관리를 자동화하여 스티비에 로그인하지 않고도 주소록을 만들고 발신자 주소를 추가할 수 있습니다.

    ### API 요청 속도 제한
    | API                   | 속도 제한  |
    |--------------------------------|------------------------|
    | <a href="#tag/주소록---구독자/POST/lists/{id}/subscribers/batch">주소록 구독자 대량 추가</a>         | 최대 10회/분          |
    | <a href="#tag/주소록---구독자/GET/lists/{id}/subscribers">구독자 목록 조회</a>               | 최대 100회/분         |
    | 그 외 모든 API | 최대 1000회/분        |

    ### Base URL
    모든 API 요청은 다음 Base URL을 기준으로 합니다:  
    `https://api.stibee.com/v2`

    ```http
    이메일 목록 조회 예시
    GET https://api.stibee.com/v2/emails
    ```

    ### 인증
    모든 API 요청은 인증을 위해 `AccessToken` 헤더를 필요로 합니다.<br/>
    `AccessToken`은 스티비 서비스의 [워크스페이스 설정] > [API 키] 메뉴에서 생성할 수 있습니다.<br/>
    자세한 내용은 [스티비 도움말 > 주소록 API 사용하기 > API 키 만들기](https://help.stibee.com/api-webhook/api#id-1-api-2)를 참고하세요.<br/>
    2025년 1월 21일 이후에 생성된 API 키로만 인증할 수 있습니다.

    #### 인증 확인    
    `/auth-check`는 발급된 API 키를 사용해 인증이 정상적으로 작동하는지 확인할 수 있는 테스트용 요청입니다.
    
    ```http
    GET /auth-check
    AccessToken: abcdefg1234
    ```

    ### 오류 응답
    정상적인 상황에서는 `200 OK` 또는 `400 Bad Request`가 반환됩니다.  
    `5XX` 에러는 시스템 장애로 간주되며, 재시도 등의 처리가 필요합니다.  
    API 요청 시 실패에 대한 400 코드 오류의 형태는 다음과 같습니다.
    ```JSON
    {
      "code":"Errors.Data.InvalidRequest",
      "httpStatusCode":400,
      "message":"잘못된 요청입니다."
    }
    ```
    ### 포맷 
    쿼리스트링을 제외한 모든 요청 본문은 `application/json` 형식이며, 인코딩은 `UTF-8`입니다.
  termsOfService: https://policy.stibee.com/terms
  contact:
    email: dev@stibee.com
  version: 2.0.0
externalDocs:
  description: webhook api 문서
  url: https://help.stibee.com/hc/ko/articles/4756496712079-%EC%A3%BC%EC%86%8C%EB%A1%9D-%EC%9B%B9%ED%9B%85-Webhook-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0
servers:
  - url:  https://api.stibee.com/v2
security:
  - AccessToken: []
tags:
  - name: "이메일"
    description: "프로, 엔터프라이즈 요금제에서 사용할 수 있는 API입니다."
  - name: "이메일 - 콘텐츠"
    description: "프로, 엔터프라이즈 요금제에서 사용할 수 있는 API입니다."
  - name: "이메일 - 태그"
    description: "프로, 엔터프라이즈 요금제에서 사용할 수 있는 API입니다."
  - name: "이메일 - 발송"
    description: "프로, 엔터프라이즈 요금제에서 사용할 수 있는 API입니다."
  - name: "주소록"
    description: "엔터프라이즈 요금제에서 사용할 수 있는 API입니다."
  - name: "주소록 - 구독자"
    description: "스탠다드, 프로, 엔터프라이즈 요금제에서 사용할 수 있는 API입니다."
  - name: "주소록 - 그룹"
    description: "프로, 엔터프라이즈 요금제에서 사용할 수 있는 API입니다."
  - name: "주소록 - 발신자 이메일 주소"
    description: "엔터프라이즈 요금제에서 사용할 수 있는 API입니다."
  - name: "주소록 - 사용자 정의 필드"
    description: "엔터프라이즈 요금제에서 사용할 수 있는 API입니다."
    externalDocs:
      description: Find out more
      url: http://swagger.io
      
  # get:
  #     tags:
  #       - 주소록
  #     parameters:
  #       - name: ""
  #         in: query
  #         required: true
  #         schema:
  #           type: integer
  #           format: int
  #     responses:
  #       '200':
  #         description: ""
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/CreateListResponse'
paths:
  /emails:
    post:
      summary: 이메일 생성
      tags:
        - 이메일
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmailRequest'
            example:
              subject: "이메일 제목"
              senderEmail: "gildong.go@stibee.com"
              senderName: "고길동"
              listId: 1234
      responses:
        '200':
          description: "200 OK"
          content:
            text/plain:
              schema:
                type: string
                example: "ok"
    get:
      summary: 이메일 목록 조회
      tags:
        - 이메일
      parameters:
        - name: tagIds
          in: query
          required: false
          schema:
            type: integer
            format: int
        - name: listId
          in: query
          required: false
          schema:
            type: integer
            format: int
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int
            default: 20
      responses:
        '200':
          description: "200 OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEmailsResponse'

  /emails/{id}:
    get:
      summary: 이메일 정보 조회
      tags:
        - 이메일
      parameters:
        - name: id
          in: path
          required: true
          description: 이메일 아이디
          schema:
            type: integer
            format: int
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEmailResponse'
    put:
      tags:
        - 이메일
      summary: 이메일 정보 수정
      description: |
        작성 중 상태인 이메일의 정보(이메일 제목, 발신자 이름, 세그먼트, 그룹 등)를 수정할 수 있습니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 수정할 이메일 아이디
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmailRequest'
      responses:
        '200':
          description: 이메일이 성공적으로 수정됨
          content:
            text/plain:
              schema:
                type: string
                example: "ok"
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateEmailErrorResponse'
    delete:
      summary: 이메일 삭제
      tags:
        - 이메일
      parameters:
        - name: id
          in: path
          required: true
          description: 삭제할 이메일 아이디
          schema:
            type: integer
      responses:
        '200':
          description: 성공적으로 삭제됨
          content:
            text/plain:
              schema:
                type: string
                example: "ok"
  /emails/{id}/logs:
    get:
      tags:
        - 이메일
      summary: 이메일 상세 통계 조회
      description: 특정 이메일의 상세 통계 정보를 조회합니다
      parameters:
        - name: id
          in: path
          required: true
          description: 이메일 아이디
          schema:
            type: integer
        - name: offset
          in: query
          required: false
          description: 현재 데이터 조회가 시작되는 위치
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          required: false
          description: 한 번에 가져올 데이터의 최대 개수
          schema:
            type: integer
            minimum: 1
            default: 100
      responses:
        '200':
          description: 상세 통계 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailLogsResponse'
  /emails/{id}/copy:
    post:
      tags:
        - 이메일
      summary: 이메일 복사
      description: 특정 이메일을 복사하여 새로운 이메일을 생성합니다
      parameters:
        - name: id
          in: path
          required: true
          description: 복사할 이메일 아이디
          schema:
            type: integer
      responses:
        '200':
          description: 이메일이 성공적으로 복사됨
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedCopiedEmailResponse'
  /emails/{id}/tags/release:
    post:
      tags:
        - "이메일 - 태그"
      summary: 이메일 태그 해제
      description: 특정 이메일에서 지정된 태그들을 해제합니다
      parameters:
        - name: id
          in: path
          required: true
          description: 이메일 아이디
          schema:
            type: integer
        - name: tagIds
          in: query
          required: true
          description: 태그 아이디 목록 (콤마로 구분)
          schema:
            type: string
            pattern: '^\d+(,\d+)*$'
            example: "1,2"
      responses:
        '200':
          description: 성공적으로 태그가 해제됨
          content:
            text/plain:
              schema:
                type: string
                example: "ok"
  /emails/{id}/tags/assign:
    post:
      summary: 이메일 태그 할당
      tags:
        - "이메일 - 태그"
      parameters:
        - name: id
          in: path
          required: true
          description: 이메일 아이디
          schema:
            type: integer
        - name: tagIds
          in: query
          required: true
          description: 태그 아이디 목록 (콤마로 구분)
          schema:
            type: string
          example: "1,2"
            
      responses:
        '200':
          description: 성공적으로 처리됨
          content:
            text/plain:
              schema:
                type: string
                example: "ok"
  /emails/{id}/content:
    get:
      tags:
        - "이메일 - 콘텐츠"
      summary: 이메일 콘텐츠 조회
      description: 특정 이메일의 HTML 콘텐츠를 조회합니다
      parameters:
        - name: id
          in: path
          required: true
          description: 이메일 아이디
          schema:
            type: integer
      responses:
        '200':
          description: 이메일 콘텐츠
          content:
            text/html:
              schema:
                type: string
                example: |
                  <html>
                    <head>
                    </head>
                    <body>
                      hello
                    </body>
                  </html>
    post:
      summary: 이메일 콘텐츠 수정
      tags:
        - "이메일 - 콘텐츠"
      parameters:
        - name: id
          in: path
          required: true
          description: 이메일 아이디
          schema:
            type: integer
      requestBody:
        required: true
        content:
          text/html:
            schema:
              type: string
              description: 이메일 HTML 콘텐츠
            example: |
              <html>
                <head>
                </head>
                <body>
                  hello
                </body>
              </html>
      responses:
        '200':
          description: 성공적으로 처리됨
          content:
            text/plain:
              schema:
                type: string
                example: "ok"
  /emails/{id}/send:
    post:
      tags:
        - "이메일 - 발송"
      summary: 이메일 발송
      description: 이메일을 발송합니다
      parameters:
        - name: id
          in: path
          required: true
          description: 발송할 이메일 아이디
          schema:
            type: integer
      responses:
        '200':
          description: 이메일이 성공적으로 발송됨
          content:
            text/plain:
              schema:
                type: string
                example: "ok"
  /emails/{id}/reserve:
    post:
      tags:
        - "이메일 - 발송"
      summary: 이메일 발송 예약
      description: |
        이메일을 예약합니다. 
        예약 시, 발송 시간을 YYYYMMDDhhmmss 형식으로 지정해야 하며, 대한민국 표준시(UTC+9)를 따릅니다.
        예시: 2025년 5월 1일 11시 30분 00초 → 20250501113000
      parameters:
        - name: id
          in: path
          required: true
          description: 예약 발송할 이메일 아이디
          schema:
            type: integer
        - name: reserveTime
          in: query
          required: true
          description: |
            예약 발송 시간 (YYYYMMDDhhmmss 형식)
            대한민국 표준시(UTC+9) 기준
          schema:
            type: string
            pattern: '^\d{14}$'
            example: "20260101000000"
      responses:
        '200':
          description: 이메일 발송이 성공적으로 예약됨
          content:
            text/plain:
              schema:
                type: string
                example: "ok"
  /emails/{id}/cancel-reserve:
    post:
      tags:
        - "이메일 - 발송"
      summary: 이메일 발송 예약 취소
      description: 예약된 이메일 발송을 취소합니다
      parameters:
        - name: id
          in: path
          required: true
          description: 예약 취소할 이메일 아이디
          schema:
            type: integer
      responses:
        '200':
          description: 이메일 발송 예약이 성공적으로 취소됨
          content:
            text/plain:
              schema:
                type: string
                example: "ok"
  /lists:
    post:
      tags:
        - 주소록
      summary: 주소록 생성
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateListRequest'
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateListResponse'
    get:
      tags:
        - 주소록
      summary: 주소록 목록 조회
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int
            default: 50
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetListsResponse'
  /lists/{id}:
    get:
      summary: 주소록 정보 조회
      tags:
        - 주소록
      parameters:
        - name: id
          in: path
          required: true
          description: 주소록 아이디
          schema:
            type: integer
      responses:
        '200':
          description: 성공적으로 조회됨
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetListResponse'
              example:
                id: 1234
                owner: "hello@stibee.com"
                name: "주소록 이름"
                senderName: "발신자 이름"
                companyName: "회사명"
                companyContact: "hello@stibee.com"
                companyAddress: "서울시 중구 동호로"
                useSubscriberAutoDelete: true
                canSendToUnsubscribed: false
    put:
      summary: 주소록 정보 수정
      tags:
        - 주소록
      parameters:
        - name: id
          in: path
          required: true
          description: 주소록 아이디
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateListRequest'
            example:
              name: "주소록 이름"
              senderName: "발신자 이름"
              companyName: "회사명"
              companyContact: "hello@stibee.com"
              companyAddress: "서울시 중구 동호로"
              useSubscriberAutoDelete: true
              canSendToUnsubscribed: false
      responses:
        '200':
          description: 성공적으로 수정됨
          content:
            text/plain:
              schema:
                type: string
                example: "ok"
    delete:
      tags:
        - 주소록
      summary: 주소록 삭제
      description: 특정 아이디의 주소록을 삭제합니다
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 성공적으로 삭제됨
          content:
            text/plain:
              schema:
                type: string
                example: "ok"
    

  # /lists/{id}/fields:
  #   get:
  #     tags:
  #       - 주소록
  #     summary: 주소록 사용자 정의 필드 조회
  #     description: 특정 주소록의 사용자 정의 필드 목록을 조회합니다
  #     parameters:
  #       - name: id
  #         in:
